from .fingerprint import Fingerprint
from .geometry import get_constraints
from numpy import asarray, concatenate, transpose, zeros


class FingerprintWrapperGPAtom(Fingerprint):
    """
    Fingerprint constructor class that convert an atoms instance into
    a fingerprint instance with vector and derivatives.
    The fingerprint is generated by wrapping the fingerprint class
    from gpatom.
    (https://gitlab.com/gpatom/ase-gpatom)
    """

    def __init__(
        self,
        fingerprint,
        reduce_dimensions=True,
        use_derivatives=True,
        dtype=float,
        **kwargs,
    ):
        """
        Initialize the fingerprint constructor.

        Parameters:
            fingerprint: gpatom class.
                The fingerprint class instance from ase-gpatom.
            reduce_dimensions: bool
                Whether to reduce the fingerprint space if constrains are used.
            use_derivatives: bool
                Calculate and store derivatives of the fingerprint wrt.
                the cartesian coordinates.
            dtype: type (optional)
                The data type of the arrays.
                If None, the default data type is used.
        """
        super().__init__(
            fingerprint=fingerprint,
            reduce_dimensions=reduce_dimensions,
            use_derivatives=use_derivatives,
            dtype=dtype,
            **kwargs,
        )

    def update_arguments(
        self,
        fingerprint=None,
        reduce_dimensions=None,
        use_derivatives=None,
        dtype=None,
        **kwargs,
    ):
        """
        Update the class with its arguments.
        The existing arguments are used if they are not given.

        Parameters:
            fingerprint: gpatom class.
                The fingerprint class instance from ase-gpatom.
            reduce_dimensions: bool
                Whether to reduce the fingerprint space if constrains are used.
            use_derivatives: bool
                Calculate and store derivatives of the fingerprint wrt.
                the cartesian coordinates.
            dtype: type (optional)
                The data type of the arrays.
                If None, the default data type is used.

        Returns:
            self: The updated instance itself.
        """
        super().update_arguments(
            reduce_dimensions=reduce_dimensions,
            use_derivatives=use_derivatives,
            dtype=dtype,
        )
        if fingerprint is not None:
            self.fingerprint = fingerprint
        return self

    def make_fingerprint(self, atoms, **kwargs):
        "The calculation of the gp-atom fingerprint"
        # Get the masked and not masked atoms
        not_masked, _ = get_constraints(
            atoms,
            reduce_dimensions=self.reduce_dimensions,
        )
        # Check if there are any not masked atoms
        if len(not_masked) == 0:
            fp = zeros((0), dtype=self.dtype)
            if self.use_derivatives:
                return fp, zeros((0, 0), dtype=self.dtype)
            return fp, None
        # Get the fingerprint
        fp = self.fingerprint(
            atoms,
            calc_gradients=self.use_derivatives,
            **kwargs,
        )
        if self.use_derivatives:
            derivative = fp.reduce_coord_gradients()
            # enforced not_masked since it is not possible in ASE-GPATOM
            derivative = concatenate(
                derivative[not_masked],
                axis=1,
                dtype=self.dtype,
            )
        else:
            derivative = None
        return asarray(fp.vector, dtype=self.dtype), derivative

    def get_arguments(self):
        "Get the arguments of the class itself."
        # Get the arguments given to the class in the initialization
        arg_kwargs = dict(
            fingerprint=self.fingerprint,
            reduce_dimensions=self.reduce_dimensions,
            use_derivatives=self.use_derivatives,
            dtype=self.dtype,
        )
        # Get the constants made within the class
        constant_kwargs = dict()
        # Get the objects made within the class
        object_kwargs = dict()
        return arg_kwargs, constant_kwargs, object_kwargs


class FingerprintWrapperDScribe(Fingerprint):
    """
    Fingerprint constructor class that convert an atoms instance into
    a fingerprint instance with vector and derivatives.
    The fingerprint is generated by wrapping the fingerprint class
    from dscribe (>=2.1).
    (https://github.com/SINGROUP/dscribe)
    """

    def __init__(
        self,
        fingerprint,
        reduce_dimensions=True,
        use_derivatives=True,
        fingerprint_kwargs={},
        dtype=float,
        **kwargs,
    ):
        """
        Initialize the fingerprint constructor.

        Parameters:
            fingerprint: dscribe class instance (>=2.1).
                The fingerprint class instance from dscribe.
            reduce_dimensions: bool
                Whether to reduce the fingerprint space if constrains are used.
            use_derivatives: bool
                Calculate and store derivatives of the fingerprint wrt.
                the cartesian coordinates.
            fingerprint_kwargs: dict
                Kwargs for the fingerprint function call.
            dtype: type (optional)
                The data type of the arrays.
                If None, the default data type is used.
        """
        super().__init__(
            fingerprint=fingerprint,
            reduce_dimensions=reduce_dimensions,
            use_derivatives=use_derivatives,
            fingerprint_kwargs=fingerprint_kwargs,
            dtype=dtype,
            **kwargs,
        )

    def update_arguments(
        self,
        fingerprint=None,
        reduce_dimensions=None,
        use_derivatives=None,
        fingerprint_kwargs=None,
        dtype=None,
        **kwargs,
    ):
        """
        Update the class with its arguments.
        The existing arguments are used if they are not given.

        Parameters:
            fingerprint: dscribe class instance (>=2.1).
                The fingerprint class instance from dscribe.
            reduce_dimensions: bool
                Whether to reduce the fingerprint space if constrains are used.
            use_derivatives: bool
                Calculate and store derivatives of the fingerprint wrt.
                the cartesian coordinates.
            fingerprint_kwargs: dict
                Kwargs for the fingerprint function call.
            dtype: type (optional)
                The data type of the arrays.
                If None, the default data type is used.

        Returns:
            self: The updated instance itself.
        """
        super().update_arguments(
            reduce_dimensions=reduce_dimensions,
            use_derivatives=use_derivatives,
            dtype=dtype,
        )
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if fingerprint_kwargs is not None:
            self.fingerprint_kwargs = fingerprint_kwargs.copy()
        return self

    def make_fingerprint(self, atoms, **kwargs):
        "The calculation of the dscribe fingerprint"
        # Get the masked and not masked atoms
        not_masked, _ = get_constraints(
            atoms,
            reduce_dimensions=self.reduce_dimensions,
        )
        # Check if there are any not masked atoms
        if len(not_masked) == 0:
            fp = zeros((0), dtype=self.dtype)
            if self.use_derivatives:
                return fp, zeros((0, 0), dtype=self.dtype)
            return fp, None
        # Get the fingerprint
        if self.use_derivatives:
            derivative, vector = self.fingerprint.derivatives(
                atoms,
                include=not_masked,
                return_descriptor=True,
                **self.fingerprint_kwargs,
            )
            derivative = asarray(derivative, dtype=self.dtype)
            if len(derivative.shape) == 4:
                derivative = transpose(derivative, (0, 3, 1, 2))
            else:
                derivative = transpose(derivative, (2, 0, 1))
            derivative = derivative.reshape(-1, len(not_masked) * 3)
        else:
            vector = self.fingerprint.create(atoms, **self.fingerprint_kwargs)
            derivative = None
        return asarray(vector.reshape(-1), dtype=self.dtype), derivative

    def get_arguments(self):
        "Get the arguments of the class itself."
        # Get the arguments given to the class in the initialization
        arg_kwargs = dict(
            fingerprint=self.fingerprint,
            reduce_dimensions=self.reduce_dimensions,
            use_derivatives=self.use_derivatives,
            fingerprint_kwargs=self.fingerprint_kwargs,
            dtype=self.dtype,
        )
        # Get the constants made within the class
        constant_kwargs = dict()
        # Get the objects made within the class
        object_kwargs = dict()
        return arg_kwargs, constant_kwargs, object_kwargs
